// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model User {
  userId          String            @id @default(uuid()) @map("user_id")
  username        String            @unique
  password        String
  email           String?
  nickname        String?
  realName        String?           @map("real_name")
  age             String?
  avatar          String?
  school          String?
  address         String?
  createAt        DateTime          @default(now()) @map("create_at")
  updateAt        DateTime          @default(now()) @updatedAt @map("update_at")
  shoppingCart    shoppingCart[]
  purchasedCourse PurchasedCourse[]
  roles           RoleToUser[]
  teacher         Teacher?
  student         Student?

  @@map("user")
}

model Teacher {
  teacherId String  @id @default(uuid()) @map("teacher_id")
  username  String  @unique
  user      User    @relation(fields: [username], references: [username])
  classes   Class[]

  @@map("teacher")
}

model Student {
  studentId String           @id @default(uuid()) @map("student_id")
  username  String           @unique
  user      User             @relation(fields: [username], references: [username])
  classes   ClassToStudent[]

  @@map("student")
}

model Role {
  roleId      String       @id @default(uuid()) @map("role_id")
  roleName    String       @unique @map("role_name")
  description String?
  createAt    DateTime     @default(now()) @map("create_at")
  updateAt    DateTime     @default(now()) @updatedAt @map("update_at")
  users       RoleToUser[]
  menus       MenuToRole[]

  @@map("role")
}

model Menu {
  menuId      Int          @id @default(autoincrement()) @map("menu_id")
  pid         Int?
  parentMenu  Menu?        @relation("MenuTree", fields: [pid], references: [menuId])
  childMenu   Menu[]       @relation("MenuTree")
  menuTitle   String       @unique @map("menu_title")
  path        String?      @unique
  menuIcon    String?      @map("menu_icon")
  description String?
  createAt    DateTime     @default(now()) @map("create_at")
  updateAt    DateTime     @default(now()) @map("update_at")
  roles       MenuToRole[]

  @@map("menu")
}

model RoleToUser {
  roleName String   @map("role_name")
  username String   @map("username")
  role     Role     @relation(fields: [roleName], references: [roleName])
  user     User     @relation(fields: [username], references: [username])
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @default(now()) @updatedAt @map("update_at")

  @@id([username, roleName])
  @@map("role_to_user")
}

model MenuToRole {
  menuTitle String   @map("title")
  roleName  String   @map("role_name")
  menu      Menu     @relation(fields: [menuTitle], references: [menuTitle])
  role      Role     @relation(fields: [roleName], references: [roleName])
  createAt  DateTime @default(now()) @map("create_at")
  updateAt  DateTime @default(now()) @updatedAt @map("update_at")

  @@id([menuTitle, roleName])
  @@map("menu_to_role")
}

model Course {
  courseId          String            @id @default(uuid()) @map("course_id")
  courseName        String            @unique @map("course_name")
  courseDescription String?           @map("course_Description")
  courseCover       String            @map("course_cover")
  courseVideo       String            @map("course_video")
  coursePrice       String            @map("course_price")
  courseGrade       String            @map("course_grade")
  courseState       String            @map("course_state")
  courseCategory    String?           @map("course_categore")
  shoppingCart      shoppingCart[]
  purchasedCourse   PurchasedCourse[]
  createAt          DateTime          @default(now()) @map("create_at")
  updateAt          DateTime          @default(now()) @updatedAt @map("update_at")

  @@map("course")
}

model shoppingCart {
  id       String   @id @default(uuid())
  username String
  user     User     @relation(fields: [username], references: [username])
  courseId String   @map("course_id")
  course   Course   @relation(fields: [courseId], references: [courseId])
  address  String
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @default(now()) @updatedAt @map("update_at")

  @@unique([username, courseId], name: "usernameAndCourseId")
  @@map("shopping_cart")
}

model PurchasedCourse {
  orderId  String   @id @default(uuid()) @map("order_id")
  username String
  user     User     @relation(fields: [username], references: [username])
  courseId String   @map("course_id")
  course   Course   @relation(fields: [courseId], references: [courseId])
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @default(now()) @updatedAt @map("update_at")
  price    String

  @@unique([username, courseId], name: "usernameAndCourseId")
  @@map("purchased_course")
}

model Class {
  classId          String           @id @default(uuid()) @map("class_id")
  createdTeacher   String           @default(uuid()) @map("created_teacher")
  teacher          Teacher          @relation(fields: [createdTeacher], references: [username])
  className        String           @unique //班级名称
  classNumber      Int              @unique @default(autoincrement()) @map("class_number")
  classDescription String?          @map("class_description")
  students         ClassToStudent[]
  createAt         DateTime         @default(now()) @map("create_at")
  updateAt         DateTime         @default(now()) @updatedAt @map("update_at")

  @@map("class")
}

model ClassToStudent {
  studentId String
  student   Student  @relation(fields: [studentId], references: [studentId])
  classId   String
  class     Class    @relation(fields: [classId], references: [classId])
  createAt  DateTime @default(now()) @map("create_at")
  updateAt  DateTime @default(now()) @updatedAt @map("update_at")

  @@id([classId, studentId])
  @@map("class_to_student")
}
