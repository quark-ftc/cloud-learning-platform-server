// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model User {
  userId          String            @id @default(uuid()) @map("user_id")
  username        String            @unique
  password        String
  email           String?
  nickname        String?
  realName        String?           @map("real_name")
  age             String?
  avatar          String?
  school          String?
  address         String?
  createAt        DateTime          @default(now()) @map("create_at")
  updateAt        DateTime          @default(now()) @updatedAt @map("update_at")
  shoppingCart    shoppingCart[]
  purchasedCourse PurchasedCourse[]
  roles           RoleToUser[]
  teacher         Teacher?
  student         Student?

  @@map("user")
}

model Teacher {
  teacherId String     @id @default(uuid()) @map("teacher_id")
  username  String     @unique
  user      User       @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  classes   Class[]
  homeworks Homework[]

  @@map("teacher")
}

model Student {
  studentId String              @id @default(uuid()) @map("student_id")
  username  String              @unique
  user      User                @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  classes   ClassToStudent[]
  homework  StudentToHomeWork[]

  @@map("student")
}

model Role {
  roleId      String       @id @default(uuid()) @map("role_id")
  roleName    String       @unique @map("role_name")
  description String?
  createAt    DateTime     @default(now()) @map("create_at")
  updateAt    DateTime     @default(now()) @updatedAt @map("update_at")
  users       RoleToUser[]
  menus       MenuToRole[]

  @@map("role")
}

model Menu {
  menuId      Int          @id @default(autoincrement()) @map("menu_id")
  pid         Int?
  parentMenu  Menu?        @relation("MenuTree", fields: [pid], references: [menuId])
  childMenu   Menu[]       @relation("MenuTree")
  menuTitle   String       @unique @map("menu_title")
  path        String?      @unique
  menuIcon    String?      @map("menu_icon")
  description String?
  createAt    DateTime     @default(now()) @map("create_at")
  updateAt    DateTime     @default(now()) @map("update_at")
  roles       MenuToRole[]

  @@map("menu")
}

model RoleToUser {
  roleName String   @map("role_name")
  username String   @map("username")
  role     Role     @relation(fields: [roleName], references: [roleName], onDelete: Cascade, onUpdate: Cascade)
  user     User     @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @default(now()) @updatedAt @map("update_at")

  @@id([username, roleName])
  @@map("role_to_user")
}

model MenuToRole {
  menuTitle String   @map("title")
  roleName  String   @map("role_name")
  menu      Menu     @relation(fields: [menuTitle], references: [menuTitle], onDelete: Cascade, onUpdate: Cascade)
  role      Role     @relation(fields: [roleName], references: [roleName], onDelete: Cascade, onUpdate: Cascade)
  createAt  DateTime @default(now()) @map("create_at")
  updateAt  DateTime @default(now()) @updatedAt @map("update_at")

  @@id([menuTitle, roleName])
  @@map("menu_to_role")
}

model Course {
  courseId          String            @id @default(uuid()) @map("course_id")
  courseName        String            @unique @map("course_name")
  courseDescription String?           @map("course_description")
  courseCover       String            @map("course_cover")
  courseVideo       String            @map("course_video")
  coursePrice       String            @map("course_price")
  courseGrade       String            @map("course_grade")
  courseState       String            @map("course_state")
  courseCategory    String?           @map("course_category")
  shoppingCart      shoppingCart[]
  purchasedCourse   PurchasedCourse[]
  createAt          DateTime          @default(now()) @map("create_at")
  updateAt          DateTime          @default(now()) @updatedAt @map("update_at")

  @@map("course")
}

model shoppingCart {
  id       String   @id @default(uuid())
  username String
  user     User     @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  courseId String   @map("course_id")
  course   Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade, onUpdate: Cascade)
  address  String
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @default(now()) @updatedAt @map("update_at")

  @@unique([username, courseId], name: "usernameAndCourseId")
  @@map("shopping_cart")
}

model PurchasedCourse {
  orderId  String   @id @default(uuid()) @map("order_id")
  username String
  user     User     @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  courseId String   @map("course_id")
  course   Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade, onUpdate: Cascade)
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @default(now()) @updatedAt @map("update_at")
  price    String

  @@unique([username, courseId], name: "usernameAndCourseId")
  @@map("purchased_course")
}

model Class {
  classId          String           @id @default(uuid()) @map("class_id")
  createdTeacher   String           @map("created_teacher")
  teacher          Teacher          @relation(fields: [createdTeacher], references: [username], onDelete: Cascade, onUpdate: Cascade)
  className        String           @unique @map("class_name")
  classNumber      Int              @unique @default(autoincrement()) @map("class_number")
  classDescription String?          @map("class_description")
  students         ClassToStudent[]
  createAt         DateTime         @default(now()) @map("create_at")
  updateAt         DateTime         @default(now()) @updatedAt @map("update_at")
  homework         Homework[]

  @@map("class")
}

model ClassToStudent {
  id              String   @id @default(uuid())
  studentUsername String   @map("student_username")
  student         Student  @relation(fields: [studentUsername], references: [username], onDelete: Cascade, onUpdate: Cascade)
  className       String   @map("class_name")
  class           Class    @relation(fields: [className], references: [className], onDelete: Cascade, onUpdate: Cascade)
  createAt        DateTime @default(now()) @map("create_at")
  updateAt        DateTime @default(now()) @updatedAt @map("update_at")

  @@unique([studentUsername, className], name: "studentUsernameAndClassName")
  @@map("class_to_student")
}

model Homework {
  homeworkId       String   @id @default(uuid()) @map("homework_id")
  homeworkName     String   @map("homework_name") //作业的名称
  descriptionText  String   @map("description_text")
  descriptionImage String?  @map("description_image")
  createAt         DateTime @default(now()) @map("create_at")
  updateAt         DateTime @default(now()) @updatedAt @map("update_at")
  deadline         DateTime
  posingTeacher    String   @map("posted_teacher")
  teacher          Teacher  @relation(fields: [posingTeacher], references: [username], onDelete: Cascade, onUpdate: Cascade)
  homeworkType     String   @map("homework_type")
  belongedClass    String   @map("belonged_class")
  class            Class    @relation(fields: [belongedClass], references: [className], onDelete: Cascade, onUpdate: Cascade)

  student StudentToHomeWork[]

  @@unique([homeworkName, belongedClass], name: "homeworkNameAndBelongedClass")
  @@map("homework")
}

model StudentToHomeWork {
  id                    String   @id @default(uuid())
  studentUsername       String   @map("student_username")
  student               Student  @relation(fields: [studentUsername], references: [username], onDelete: Cascade, onUpdate: Cascade)
  homeworkName          String   @map("homework_name")
  homeworkBelongedClass String   @map("homework_belonged_class")
  homework              Homework @relation(fields: [homeworkName, homeworkBelongedClass], references: [homeworkName, belongedClass], onDelete: Cascade, onUpdate: Cascade)
  homeworkImage         String   @map("homework_image")
  AIEvaluation          Json?    @map("ai_evaluation")
  teacherComment        String?  @map("teacher_comment")
  createAt              DateTime @default(now()) @map("create_at")
  updateAt              DateTime @default(now()) @updatedAt @map("update_at")

  @@unique([studentUsername, homeworkBelongedClass, homeworkName], name: "studentUsernameAndHomeworkBelongedAndClassHomeworkName")
  @@map("student_to_homework")
}
